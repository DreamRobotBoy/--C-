#ifndef _MC_DATA_MANAGE_H_
#define _MC_DATA_MANAGE_H_

#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include <string.h>
#include <math.h>
typedef double FP64;


/********************************************************************************************
/********************************************************************************************
/********************************************************************************************
/*********************** 以链表表示矩阵,求解方程的解 ****************************************
/********************************************************************************************
/********************************************************************************************
********************************************************************************************/
//多维数据链表矩阵
typedef struct Matrix
{
	FP64 fData;											//矩阵系数
	struct Matrix *pNextData;						//保存下一个节点的地址
}MC_Matrix_t;


/********************************************************************************************
函数功能：创建数据链表矩阵
@Param 无:
返回:指向MC_Matrix_t类型的指针
********************************************************************************************/
MC_Matrix_t *MC_MatrixCreate();

/********************************************************************************************
函数功能：打印数据链表矩阵
@Param pMatrix:系数矩阵
@Param uiDimension:系数矩阵的维度
无返回值
********************************************************************************************/
void MC_MatrixPrint(MC_Matrix_t *pMatrix, uint16_t uiDimension);

/********************************************************************************************
函数功能：释放数据链表矩阵占用的堆栈内存
@Param pMatrix:系数矩阵
无返回值
********************************************************************************************/
void MC_MatrixClear(MC_Matrix_t *pMatrix);

/********************************************************************************************
函数功能：添加数据到系数矩阵中
@Param pMatrix:系数矩阵
@Param fData:所要添加的系数
返回值 0成功 1失败
********************************************************************************************/
uint8_t MC_MatrixAddData(MC_Matrix_t *pMatrix, FP64 fData);

/********************************************************************************************
函数功能：释放系数矩阵第index个节点占用的堆栈内存
@Param pMatrix:指向系数矩阵的指针
@Param index:所需删除的节点序号，从1开始计数。
返回值 0成功，1失败
********************************************************************************************/
uint8_t MC_MatrixDeleteIndex(MC_Matrix_t **pMatrix, uint16_t index);


/********************************************************************************************
函数功能：查找矩阵的指定系数
@Param pMatrix:系数矩阵
@Param i:指定第i行
@Param j:指定第j列
@Param uiDimension:系数矩阵的维度
返回值 0成功，1失败
********************************************************************************************/
FP64 MC_MatrixCoeffIndex(MC_Matrix_t *pMatrix, uint16_t i, uint16_t j, uint16_t uiDimension);

/********************************************************************************************
函数功能：将系数矩阵的第i行除以指定系数加到第j行,使得第j行的首系数为零
@Param pMatrix:指向指数矩阵的指针
@Param pValue[]:等式右值
@Param i,j:第i行，第j列
@Param uiDimension:系数矩阵的维度
返回值 0成功，1失败
********************************************************************************************/
uint8_t MC_MatrixCalBetterElim(MC_Matrix_t **pMatrix, FP64 pValue[], uint16_t i, uint16_t j, uint16_t uiDimension);

/********************************************************************************************
函数功能：消元第一步，将系数矩阵转换成上三角矩阵
@Param pMatrix:指向指数矩阵的指针
@Param pValue:等式右值
@Param uiDimension:系数矩阵的维度
返回值 0成功，1失败
********************************************************************************************/
uint8_t MC_MatrixElimination(MC_Matrix_t **pMatrix, FP64 pValue[], uint16_t uiDimension);

/********************************************************************************************
函数功能：消元第二步,上三角矩阵回代求解
@Param pMatrix:指向指数矩阵的指针
@Param pValue:等式右值
@Param pRoot:方程的根
@Param uiDimension:系数矩阵的维度
返回值 0成功，1失败
********************************************************************************************/
uint8_t MC_MatrixInverseCal(MC_Matrix_t *pMatrix, FP64 pValue[], FP64 pRoot[], uint16_t uiDimension);


#endif
